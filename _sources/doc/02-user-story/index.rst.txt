.. raw:: html

   <br/>
   <font color="darkgray">
   <big><big><b>
   Sireum Awas Documentation
   </b></big></big>
   </font>
   <br/>
   <font color="black">
   <big><big><big><big><b>
   2. Sireum Awas Visualizer
   </b></big></big></big></big>
   </font>

Sireum Awas User Stories
########################
.. highlight:: awas

.. raw:: html
	 
    <big><big><big><b>
    <a href="../../_static/simple_uav/index.html" target="_blank">Demo Awas</a> 
    </b></big></big></big>

.. image:: viz_big.png
   :align: center
   :width: 100%

Sireum Awas Capabilities
************************

* Model Explorer: Enables the user to explore a system's model without
  installing modeling tools. Provides the freedom of referring the
  model from both handheld devices and desktops. The user can hide
  irrelevant part of the model and focus on a specific level of
  modeling detail

----

* Dependency Analysis: A system is a composition of components and
  Awas provides insight into the interaction of components using
  component dependency

----

* Risk Analysis: The user can encode abstract error behavior of a
  component as an error token. Using Awas, a user can produce a
  witness showcasing the existence or lack of errors in the
  system. This token propagation mechanism can be generalized to
  capture infomration flow behaviors of the system

	   
Simple UAV System
*****************

Before showing you the various ways you can use Awas, let me describe
a simple example architecture of a UAV surveillance system. The
primary function of this UAV is to conduct surveillance over a
specified region. This UAV receives the region information from a
ground station, and in turn, the UAV sends back status information.

This UAV consists of a computer and a flight controller. The purpose
of the computer is to compute a set of waypoints from a map and a
flight pattern provided by the ground station. The flight controller
acts upon these waypoints to progress on the surveillance
task. Whenever the UAV reaches a waypoint, it sends out status
information back to the ground station.

.. image:: uas.png
   :align: center
   :width: 70%
   :alt: High-level UAV Sysytem 


Model Exploration
*****************

OSATE can produce a system implementation diagram from a system
implementation. The following provides a side by side comparison
between AADL instance diagram and Awas graph for the four systems of
the UAV model.

.. _UAS system:

UAS: The top level system with ground station and UAV
======================================================

.. raw:: html

  <style>
  * {
  box-sizing: border-box;
  }

  .column {
  float: left;
  width: 50%;
  padding: 5px;
  }

  /* Clearfix (clear floats) */
  .row::after {
  content: "";
  clear: both;
  display: table;
  }
  </style>

  <div class="row">
  <div class="column">
  <img src="../../_static/aadl_uas.png" alt="AADL" style="width:1000%">
  </div>
  <div class="column">
  <img src="../../_static/awas_uas.png" alt="Awas" style="width:1000%">
  </div>
  </div>


You can see that both the AADL diagram and the Awas graph consists of
three components namely GND, UAV, and RFB. However, the similarities
end here, Awas explicitly segregates input and output ports. For
in-out ports, Awas creates two ports one for input and the other for
output. Thus you can see there are two RFA ports in GND component in
the Awas side and only one in the AADL side. Awas also separates the
bidirectional connections into two separate connections.

Awas provides the following capabilities over OSATE:

1. In Awas, the diagrams are interactive
2. Users can click on a node(component and connection), port, or an edge to highlight it 
3. On clicking an edge which represents an AADL connection, Awas
   highlights the edge and also the ports involved in the
   connection. Although, AADL diagrams look cleaner, in a complex
   system edges overlap a lot and it quickly becomes tedious to trace
   each edge.
4.
   .. raw:: html
		  
     This icon <img src="../../_static/sub-graph-icon.png" alt="Sub-graph" style="width:1%"> in front of a component name
     indicates that this node contains a sub-system. By double-clicking on this node, you can open the sub-system's graph


       
     
UAV - Composed of Mission computer and Flight Controller
========================================================

.. raw:: html

  <style>
  * {
  box-sizing: border-box;
  }

  .column {
  float: left;
  width: 50%;
  padding: 5px;
  }

  /* Clearfix (clear floats) */
  .row::after {
  content: "";
  clear: both;
  display: table;
  }
  </style>

  <div class="row">
  <div class="column">
  <img src="../../_static/aadl_uav.png" alt="AADL" style="width:1000%">
  </div>
  <div class="column">
  <img src="../../_static/awas_uav.png" alt="Awas" style="width:1000%">
  </div>
  </div>

In a sub-system graph, Awas creates the parent component's ports as
nodes. The node ``recv_map`` is same as the port in the UAV component
from the `UAS system`_. Therefore, all interaction on this node is
mimicked on to the port in the parent component.
  

    
Mission computer - Composed of Radio, UART and Software Components
==================================================================

.. raw:: html

  <style>
  * {
  box-sizing: border-box;
  }

  .column {
  float: left;
  width: 50%;
  padding: 5px;
  }

  /* Clearfix (clear floats) */
  .row::after {
  content: "";
  clear: both;
  display: table;
  }
  </style>

  <div class="row">
  <div class="column">
  <img src="../../_static/aadl_mc.png" alt="AADL" style="width:1000%">
  </div>
  <div class="column">
  <img src="../../_static/awas_mc.png" alt="Awas" style="width:1000%">
  </div>
  </div>

You can see that in Awas graph, there are lot more edges when compared
to the AADL diagram. The additional edges are the edges capturing the
binding relationship. For example, the component ``PROC_SW`` has two
ports ``processor_IN`` and ``processor_OUT`` connecting the component
``PROC_HW``. These edges capture the relation that the ``PROC_SW``
representing the software of the system executes on the hardware
``PROC_HW``. However, AADL diagrams fail to capture these binding
relations and the non-trivial information flow through them.
	 

Software - Composed of drivers and logic for computing the waypoints
====================================================================

.. raw:: html

  <style>
  * {
  box-sizing: border-box;
  }

  .column {
  float: left;
  width: 50%;
  padding: 5px;
  }

  /* Clearfix (clear floats) */
  .row::after {
  content: "";
  clear: both;
  display: table;
  }
  </style>

  <div class="row">
  <div class="column">
  <img src="../../_static/aadl_sw.png" alt="AADL" style="width:1000%">
  </div>
  <div class="column">
  <img src="../../_static/awas_sw.png" alt="Awas" style="width:1000%">
  </div>
  </div>

The Software system consists of drivers for the radio device for
communicating with the ground station and the UART for communicating
with the flight controller. Apart from the drivers, the software
system consists of a filter to check the wellformedness of the map and
the components to convert the map into waypoints. 

Awas Visualizer Interface
=========================

Awas visualizer is a single page web application. At the top of the
page, there are five buttons. The first one form the right is the
``Settings`` button to control the amount of information displayed in
the Awas graph. The next button is the ``Awas Query`` button used to
open the query interpreter and the results table view. The next three
buttons are dependency analysis buttons discussed in the subsequent
sections.

Below the top bar is the Awas graph viewer. Each system in the AADL
becomes an Awas Graph, and Awas allows the user to view multiple
systems at the same time by reorganizing the graph viewer window. The
top left of the graph viewer informs the system name and the hierarchy
from the top level system.
  
View Options
============

Using Awas a user can decide what are all the information in a
component to view and what to hide. By clicking the `Settings` button,
the user can open the view options panel. 


.. image:: view_settings.png
   :align: center	   
   :alt: Awas View Settings

.. warning::
   The `view binding edges` option in the view options panel
   modifies the underlying graph data structure. On large graphs, this
   toggle may take a few seconds to complete. Also, do not perform
   path queries in the presence of a large number of binding
   edges. Doing so may take a long time to evaluate a path query.

Flows
-----

Flows are the dependencies between a component's input and output
ports. In Awas, the user can choose to view these flows or hide them.

.. image:: component_noflow.png
   :align: center
   :width: 50%
   :alt: Component without flow

By selecting the checkbox in the settings view, one can view the flow
information in components.

In AADL there are three kinds of flows.

* Flow source - Information originates within a component and flows out
  through its output port

* Flow sink - Information flows into a component but does not flows
  out instead the component consumes the information
  
.. image:: component_flow_2.png
   :align: center	   
   :width: 50%
   :alt: Source and Sink flows

* Flow path - Information flows into the component may be just
  propagated out or transformed and propagated through the component

.. image:: component_flow.png
   :align: center	   
   :width: 50%
   :alt: Flow path

By clicking on a flow, Awas can reveal the relationships between flow
and the ports of a component.

Connections
-----------

In AADL, a user can add flow relations to a connection indicating the
information that influences the communication substrate. The AADL
instance diagram fails to capture these flows. In Awas, users have an
option to view or hide this information. Similarly, connections and
the underlying communication substrate exchange information through
the bindings relations that is missing in AADL instance
diagram. Again, Awas provides an option to view or hide these bindings
relation.


.. image:: system_bindings.png
   :align: center	   
   :width: 100%
   :alt: Flow path

	 

Dependency Analysis
*******************

In model-based design, the primary functionality of a designer is to
translate the system requirements into models. At a high level, these
requirements are merely connectivity among components. To check for
the satisfactory of the requirements by the model the analyst can
utilize Awas to project the component dependencies.

Forward and Backward Analysis
=============================

Awas can do two kinds of fundamental dependency analysis based on the
direction of traversal. The analyst can use them to answer specific
questions such as the following:

.. _Query 1: 

Query 1
   If the ground station sends the map, Where does information regarding the map flow? Also, where is it getting consumed?

   To find the solution the analyst can use Awas by selecting the port
   ``send_map`` in the component ground station and clicking the
   ``Forward`` button on the top of the screen. This action highlights
   all the ports that receive the information from ``send_map``. The
   flow highlighted with a darker shade indicates the consumption
   of this information. If the user wants to go down the hierarchy,
   they can double click on the ``UAV`` component to see the influence
   of ``send_map`` in the subsystems.

   
.. image:: intra_forward.png
   :align: center	   
   :width: 100%
   :alt: Forward from send_map

.. _Query 2: 
	 
Query 2
   From where does information needed to compute the ``recv_status`` flow from?

   The user can select the port ``recv_status`` and click on the
   ``Backward`` button on the top right of the screen. This action
   highlights all the ports through which the information needed by
   ``recv_status`` flows. Also highlights the flows that source the
   information in a darker shade.

.. image:: backward_click.png
   :align: center	   
   :width: 100%
   :alt: Backward from recv_status
   
   
Dependency Analysis Using Queries
=================================

Although the select and click on ``Forward`` or ``Backward`` button
action is quick and straightforward, it is not easily reproducible by an
automated regression testing suite. To remedy this, we provide a simple
query language an interpreter inside the Awas visualizer. To open the
query interpreter, click on the ``Awas Query`` button on the top right
corner.
 
.. image:: query_view.png
   :align: center	   
   :width: 50%
   :alt: Query View

You can see in the above figure the query view tab contains two other tabs.

1. Table

   The ``Table`` tab lists the previously executed queries. The color
   in front of each query name indicates the result highlight
   color. The query names are clickable buttons, upon clicking
   highlights the results on the graph. 

2. CLI

   The CLI provides a terminal for entering the queries. This window
   also serves a place to inform any syntax errors on the queries. If
   there exists a solution, this terminal displays the list of graphs
   containing the solution. On successful execution of a query, Awas
   creates a table entry and stores the result to view it again at a
   later time.

   
   
   .. image:: query_forward.png
      :align: center	   
      :width: 100%
      :alt: query forward

	 
   The query ``forward_GND_send_map`` performs the same operation of
   the `Query 1`_. However, using the query rather than the button
   click allows the user to save and execute the same during
   regression testing.

   .. _forward reach query:

   .. raw:: html

      <table width="100%" > <tr> <td>

   .. code:: bash

      forward_GND_send_map = reach forward UAS_Impl_Instance.GND.send_map

   .. raw:: html

      </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
      <button id="forward_GND_send_map = reach forward UAS_Impl_Instance.GND.send_map">
      <img height="20" src="../../_static/clippy.svg" alt="Copy to
      clipboard"/> </button> </td> </tr> </table> <script> new
      Clipboard(document.getElementById('copyMacDevelopment'));
      </script> 

   In this query statement, the term before ``=`` is the name of the
   query and everything else is the query expression.

   After the ``=``, there are only two possibilities

   1. Primary Query Expression:

      This can be a canonical representation
      of a node, port, or an error token or a previously executed
      query name.
      
   2. Reach Expression:

      All reach expressions start with the term ``reach,`` and the
      term after the ``reach`` indicates the direction of
      reachability. In the above Awas query, the direction of the
      analysis is forward and the term ``forward``. The rest is the
      canonical representation of the port send_map.
   
Multiple Query Results
----------------------

The last button to discuss at the top right corner is the ``Clear``
button. This button's purpose is to clear the highlights on the
graph. However, without clearing the results, we can display the
results of multiple queries at the same time.

.. image:: query_backward.png
   :align: center	   
   :width: 100%
   :alt: Multiple Query Results

The query ``backward_GND_status`` performs the same action as the
`Query 2`_. By clicking on the button ``backward_GND_status`` without
clearing the result of the previous query we can see the results of
both the queries.

.. raw:: html

   <table width="100%" > <tr> <td>
	 
.. code::
	  
   backward_GND_status = reach backward UAS_Impl_Instance.GND.recv_status

.. raw:: html

   </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
   <button id="backward_GND_status = reach backward UAS_Impl_Instance.GND.recv_status">
   <img height="20" src="../../_static/clippy.svg" alt="Copy to
   clipboard"/> </button> </td> </tr> </table> <script> new
   Clipboard(document.getElementById('copyMacDevelopment'));
   </script> 
	 

Complex Queries
===============

The query language's capability goes beyond the simple queries. Using
the queries, the analyst can pose some of the exciting questions such as

.. _Query 3: 

Query 3
   when the ground station is sending the map, how does it get to the flight controller?

   The striking distinction between `Query 3`_ and the previous
   queries is the number of arguments in the query. In this query, the
   analyst ask is it possible to reach the flight controller from the ground
   station, if so show how it is possible? In the previous queries we
   asked, how is the information flowing into or out of a specific
   node, port or error token. Here we are asking if we start from a
   source is it possible to reach a destination of interest.


 
Source to Destination Query
---------------------------

.. image:: query_chop.png
   :align: center	   
   :width: 100%
   :alt: Query with source and destination

The following Awas query statement captures the analyst's `Query 3`_

.. raw:: html

   <table width="100%" > <tr> <td>

.. code::
   
   GS_flight_controller = reach from UAS_Impl_Instance.GND.send_map to UAS_Impl_Instance.UAV.FCTL.waypoint

.. raw:: html

   </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
   <button id="copyMacDevelopment"data-clipboard-text="GS_flight_controller = reach from UAS_Impl_Instance.GND.send_map to UAS_Impl_Instance.UAV.FCTL.waypoint">
   <img height="20" src="../../_static/clippy.svg" alt="Copy to
   clipboard"/> </button> </td> </tr> </table> <script> new
   Clipboard(document.getElementById('copyMacDevelopment'));
   </script> 

This is again a reach expression. However, the direction of the
reachability is replaced by the term ``from`` followed by the
canonical representation of the source of information and the term
``to`` followed by the destination point of the information flow.

The source and sink can be any two nodes, ports, or error tokens. If
the source and sink are transitively reachable, then Awas
highlights results, or Awas informs the lack of information flow.
	 

Path Queries
------------

Although can capture the information flow between a source
and destination, there are multiple ways information can flow from
source to destination. If one wishes to enumerate all the individual
paths, they can alter the above Awas query as follows.

.. raw:: html

   <table width="100%" > <tr> <td>

.. code::
   
   GS_flight_controller_paths = reach paths from UAS_Impl_Instance.GND.send_map
                                              to UAS_Impl_Instance.UAV.FCTL.waypoint

.. raw:: html

   </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
   <button id="copyMacDevelopment"data-clipboard-text="GS_flight_controller_paths = reach paths from UAS_Impl_Instance.GND.send_map to UAS_Impl_Instance.UAV.FCTL.waypoint">
   <img height="20" src="../../_static/clippy.svg" alt="Copy to
   clipboard"/> </button> </td> </tr> </table> <script> new
   Clipboard(document.getElementById('copyMacDevelopment'));
   </script> 

The addition of the term ``paths`` instructs Awas to enumerate all the
paths. This action suddenly converts the simple reachability problem into an
exponentially complex problem as there can be an infinite number of
paths if there is a cycle in the graph. Our solution to this problem
is to enumerate all the paths without cycles and paths will all the
relevant cycles. Suppose there exist a simple
path A, i.e. path without any cycle. Furthermore, assume there are
cycles in the graph, and the nodes of the cycles overlap with the nodes
of the path A. Then we create a complex path with all the nodes of the
path A and the cycles whose nodes overlap with path A.

.. image:: query_result.png
   :align: center	   
   :width: 50%
   :alt: Using CLI

In the query view, you can see a little arrow in front of the query
name which indicates the existence of more than one path. On clicking
the arrow, one can view the list of paths. If one wishes to obtain only
the paths without any cycle, then they can use the keyword ``simple``.


.. raw:: html

   <table width="100%" > <tr> <td>

.. code::
   
   GS_flight_controller_simple_paths = reach simple paths from UAS_Impl_Instance.GND.send_map
                                                            to UAS_Impl_Instance.UAV.FCTL.waypoint

.. raw:: html

   </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
   <button id="copyMacDevelopment"
   data-clipboard-text="GS_flight_controller_simple_paths = reach simple paths from UAS_Impl_Instance.GND.send_map to UAS_Impl_Instance.UAV.FCTL.waypoint">
   <img height="20" src="../../_static/clippy.svg" alt="Copy to
   clipboard"/> </button> </td> </tr> </table> <script> new
   Clipboard(document.getElementById('copyMacDevelopment'));
   </script>   
   
The result of the above query list three paths. Yet, we know there is
only one path from the ground station ``send_map`` to the flight
controller ``waypoint``. This doesn't mean Awas is incorrect. Awas is
producing all the paths which include the abstract paths that flow
using components internal flow. To obtain only the refined paths,
one can use the term ``refined`` in the query.


.. raw:: html

   <table width="100%" > <tr> <td>

.. code::
   
   GS_flight_controller_refined_paths = reach refined paths from UAS_Impl_Instance.GND.send_map
                                                            to UAS_Impl_Instance.UAV.FCTL.waypoint

.. raw:: html

   </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
   <button id="copyMacDevelopment"
   data-clipboard-text="GS_flight_controller_refined_paths = reach refined paths from UAS_Impl_Instance.GND.send_map to UAS_Impl_Instance.UAV.FCTL.waypoint">
   <img height="20" src="../../_static/clippy.svg" alt="Copy to
   clipboard"/> </button> </td> </tr> </table> <script> new
   Clipboard(document.getElementById('copyMacDevelopment'));
   </script>   							   
   

.. image:: query_result_ans.png
   :align: center	   
   :width: 100%
   :alt: Query result for refined paths

	 


Path Based Filter
-----------------

What if only some of the paths listed interests the analyst? Alternatively, 
analyst wishes to see only the paths flowing through a component of
interest. In these situations, the filtering capability of Awas come in
handy.

.. _Query 4: 

Query 4
   When the ground station is sending the map, is it always flowing through the filter component?

   The filter component in the ``PROC_SW`` subsystem filters out the
   maps that are not well-formed. An Analyst can check this by asking
   is there a path from ground station to flight controller without
   going through the filter component. If there are no paths found,
   then we can conclude that all the paths flow through the filter
   component. If a path exists that does not flow through the filter,
   Awas projects it as and informs the list of Awas graph containing
   the result.


The following Awas query can answer `Query 4`_.

.. raw:: html

   <table width="100%" > <tr> <td>

.. code::

    GS_flight_controller_refined_paths = reach refined paths from UAS_Impl_Instance.GND.send_map
                                                               to UAS_Impl_Instance.UAV.FCTL.waypoint
							          with none(UAS_Impl_Instance.UAV.MCMP.PROC_SW.FTL:port)


.. raw:: html

   </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
   <button id="copyMacDevelopment"
   data-clipboard-text="GS_flight_controller_refined_paths = reach refined paths from UAS_Impl_Instance.GND.send_map to UAS_Impl_Instance.UAV.FCTL.waypoint with none(UAS_Impl_Instance.UAV.MCMP.PROC_SW.FTL:port)">
   <img height="20" src="../../_static/clippy.svg" alt="Copy to
   clipboard"/> </button> </td> </tr> </table> <script> new
   Clipboard(document.getElementById('copyMacDevelopment'));
   </script>       

On clicking the query name from the query view table, you should see
``The result is empty`` message on the bottom right of the screen.

.. image:: query_refined_path_none.png
   :align: center
   :width: 100%
   :alt: Query path filter

On the above query there are a couple of new terms:

1. ``none``: This term filters the paths that do not contain the node, port, or error token specified. Similarly, there are two more terms:
   
   * ``all``: This term filters the paths containing all of the node, port, or error token specified
   * ``some``: This term filters the paths containing at least one of the specified node, port, or error token

2. ``:port``: This term pulls out all the ports from a component. Similarly one can specify the following self descriptive terms
   
   * ``:node``
   * ``:port-error``
   * ``:in-port``
   * ``:out-port``
   * ``:error``
   * ``:source``
   * ``:sink``

Risk Analysis
*************

With the help of the error token propagation mechanism, the analyst
can model the error behavior of the system. Using Awas, the analyst
can compute the flow of errors in the system and may pose the
following questions:

Query 5
   Is there a possibility of a hazardous situation arising throughout the system operation?

QUery 6
   What are the root causes of a specific hazardous situation?

In our UAV system, we do not have any defined safety constraints
yet. However, we do have some of the security-related
properties. In the UAV system, one of the security property is that
only the authorized party can communicate with the UAV. We can abuse
the AADL EMV2 mechanism to model these simple properties and use Awas
on top of it.

Query 7
   Is only authorized and well-formed map reaches the flight controller? 

   We can check this using Awas by the following query:

   .. raw:: html

      <table width="100%" > <tr> <td>
   
   .. code::
      

      only_wellformed_authorized = reach paths from (UAS_Impl_Instance.GND.send_map:port-error)
                                                 to (UAS_Impl_Instance.UAV.FCTL.waypoint:port-error)

   .. raw:: html

      </td> <td style="vertical-align: text-top;"> &nbsp;&nbsp;
      <button id="copyMacDevelopment"
      data-clipboard-text="only_wellformed_authorized = reach paths from (UAS_Impl_Instance.GND.send_map:port-error) to (UAS_Impl_Instance.UAV.FCTL.waypoint:port-error)">
      <img height="20" src="../../_static/clippy.svg" alt="Copy to
      clipboard"/> </button> </td> </tr> </table> <script> new
      Clipboard(document.getElementById('copyMacDevelopment'));
      </script>   

      
To view the results, first, we have to enable the ``view errors``
checkbox in the view settings. On clicking on the query name form the
query view, we can notice only the ``wellformed_authenticated`` token
is highlighted. This shows neither ``unauthenticated`` nor
``not_wellformed`` reaches the flight controller.
   
.. image:: query_error_tokens.png
   :align: center
   :width: 100%
   :alt: Query with error tokens

Roadmap
*******

* Currently, the graph rendering and the graph cycles are computed
  during the page load time and when enabling or disabling the ``View
  binding edges``. Therefore, for a large model, this may take a while

  - Solution:
    
    1. Use web workers to render in the browser parallelly
    2. Launch a local server from the OSATE plugin, upon opening the Awas visualizer, process the graphs in the server

  .. Warning::
     Do not perform path queries when the ``View binding
     edges`` option is enabled. For a large system with a lot of
     binding edges, this may take a while to compute.

* Regular expressions to filter the paths

  - Solution:
    
    1. Currently the query language supports regular
       expression. However, the underlying algorithm is not supported       

* AADL EMV2 supports state transformation and error behavior
  propagation.

  - Solution:
    
    1. As a first step, weakest precondition calculus is being
       developed on top of Fault Propagation and Transformation
       Calculus(FPTC)

    2. Translate the query specific sub system to AltaRica

       
       

     

 

 
